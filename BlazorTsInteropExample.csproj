<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <PropertyGroup>
    <RtSettingsXml>$([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))Stuff/ReinforcedTypings/Reinforced.Typings.settings.xml</RtSettingsXml>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="9.0.1" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="9.0.1" PrivateAssets="all" />
    <PackageReference Include="Reinforced.Typings" Version="1.6.5" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\js\" />
  </ItemGroup>
  <Target Name="CompileTypeScript"></Target>

  <PropertyGroup>
    <ScriptsDir>$([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))Scripts/blazortsinteropexample</ScriptsDir>
    <NpmBuildOutDir>$([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))wwwroot/js/dist</NpmBuildOutDir>
  </PropertyGroup>
  <Target Name="RunNpmBuild" BeforeTargets="Build">
    <Exec Command="PowerShell -Command ^&#xD;&#xA;      &quot;$npmBuildOutDirExists = Test-Path -Path '$(NpmBuildOutDir)';&quot; ^&#xD;&#xA;      &quot;$npmBuildOutDirIsEmpty = if ($npmBuildOutDirExists) { (Get-ChildItem -Path '$(NpmBuildOutDir)' -Recurse).Count -eq 0 } else { $true };&quot; ^&#xD;&#xA;      &quot;if ($npmBuildOutDirIsEmpty) {&quot; ^&#xD;&#xA;      &quot;  Write-Host 'NpmBuildOutDir is empty. Running npm install...';&quot; ^&#xD;&#xA;      &quot;  cd '$(ScriptsDir)';&quot; ^&#xD;&#xA;      &quot;  npm install;&quot; ^&#xD;&#xA;      &quot;  npm run build;&quot; ^&#xD;&#xA;      &quot;} else {&quot; ^&#xD;&#xA;      &quot;  $dateA = (Get-ChildItem -LiteralPath '$(ScriptsDir)' -File -Recurse | Where-Object { $_.FullName -notlike '*\node_modules\*' -and $_.Name -ne 'typings.ts' } | Sort-Object LastWriteTime -Descending | Select-Object -First 1).LastWriteTime;&quot; ^&#xD;&#xA;      &quot;  $dateB = (Get-ChildItem -LiteralPath '$(NpmBuildOutDir)' -File -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1).LastWriteTime;&quot; ^&#xD;&#xA;      &quot;  if ($dateA -gt $dateB) {&quot; ^&#xD;&#xA;      &quot;    Write-Host 'Scripts are newer than dist. Building scripts...' ;&quot; ^&#xD;&#xA;      &quot;    Write-Host $dateA;&quot; ^&#xD;&#xA;      &quot;    Write-Host $dateB;&quot; ^&#xD;&#xA;      &quot;    cd '$(ScriptsDir)';&quot; ^&#xD;&#xA;      &quot;    npm run build;&quot; ^&#xD;&#xA;      &quot;  }&quot; ^&#xD;&#xA;      &quot;}&quot;" />
  </Target>

</Project>
